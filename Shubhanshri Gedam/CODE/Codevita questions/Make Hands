import sys
from collections import deque

def cvt(v):
    if v == 'A': return 1
    if v == 'J': return 11
    if v == 'Q': return 12
    if v == 'K': return 13
    return int(v)

data = sys.stdin.read().strip().split()
it = iter(data)
n = int(next(it))
d1 = []
d2 = []
for _ in range(n):
    c1 = next(it); s1 = int(next(it))
    c2 = next(it); s2 = int(next(it))
    d1.append((cvt(c1), s1))
    d2.append((cvt(c2), s2))
order = [int(next(it)), int(next(it)), int(next(it)), int(next(it))]
prio = {order[i]: i for i in range(4)}

def rearrange(cards):
    return deque(sorted(cards, key=lambda c: (c[0], -prio[c[1]])))

p1 = rearrange(d1)
p2 = rearrange(d2)
hand = []
turn = 1  # 1 -> player1 (Vaishnavi), 2 -> player2 (Suraj)

while True:
    # check before drawing: if current player's deck empty, game ends
    if turn == 1:
        if not p1:
            if not p2:
                print("TIE", end=""); break
            else:
                print("LOSER", end=""); break
    else:
        if not p2:
            if not p1:
                print("TIE", end=""); break
            else:
                print("WINNER", end=""); break

    if turn == 1:
        card = p1.popleft()
    else:
        card = p2.popleft()

    if hand:
        top = hand[-1]
        if card[0] == top[0] and prio[card[1]] < prio[top[1]]:
            hand.append(card)
            collected = list(hand)
            hand.clear()
            new_stack = rearrange(collected)
            if turn == 1:
                p1.extend(new_stack)
            else:
                p2.extend(new_stack)
            # winner plays again (turn unchanged)
            continue
        else:
            hand.append(card)
            turn = 2 if turn == 1 else 1
    else:
        hand.append(card)
        turn = 2 if turn == 1 else 1
