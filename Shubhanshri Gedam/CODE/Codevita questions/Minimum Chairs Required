import sys
from collections import deque

def required_chairs(entries):
    if not entries:
        return 0
    entries.sort(key=lambda x: x[0])
    vipQueue = deque()
    regQueue = deque()
    currentTime = entries[0][0]
    index = 0
    total = len(entries)
    serving = False
    endTime = 0
    maxChairs = 0

    while index < total or vipQueue or regQueue or serving:
        while index < total and entries[index][0] <= currentTime:
            arrival, duration, isVip = entries[index]
            if isVip == 1:
                vipQueue.append((arrival, duration))
            else:
                regQueue.append((arrival, duration))
            index += 1
            waiting = len(vipQueue) + len(regQueue)
            if waiting > maxChairs:
                maxChairs = waiting

        if not serving:
            if vipQueue:
                _, dur = vipQueue.popleft()
                endTime = currentTime + dur
                serving = True
            elif regQueue:
                _, dur = regQueue.popleft()
                endTime = currentTime + dur
                serving = True
            else:
                if index < total:
                    currentTime = entries[index][0]
                else:
                    break
                continue

        nextArrival = entries[index][0] if index < total else float('inf')
        if endTime <= nextArrival:
            currentTime = endTime
            serving = False
        else:
            currentTime = nextArrival

    return maxChairs


def try_multi_case(data):
    try:
        t = int(data[0])
    except:
        return None
    pos = 1
    cases = []
    for _ in range(t):
        if pos >= len(data):
            return None
        n = int(data[pos]); pos += 1
        customers = []
        if pos + 3 * n > len(data):
            return None
        for _ in range(n):
            a = int(data[pos]); s = int(data[pos+1]); v = int(data[pos+2])
            pos += 3
            customers.append((a, s, v))
        cases.append(customers)
    if pos != len(data):
        return None
    return cases


def try_single_case(data):
    try:
        n = int(data[0])
    except:
        return None
    if 1 + 3 * n != len(data):
        return None
    pos = 1
    customers = []
    for _ in range(n):
        a = int(data[pos]); s = int(data[pos+1]); v = int(data[pos+2])
        pos += 3
        customers.append((a, s, v))
    return [customers]


def main():
    tokens = sys.stdin.read().strip().split()
    if not tokens:
        return
    cases = try_multi_case(tokens)
    if cases is None:
        cases = try_single_case(tokens)
    if cases is None:
        return
    results = [str(required_chairs(c)) for c in cases]
    sys.stdout.write("\n".join(results))


if __name__ == "__main__":
    main()
