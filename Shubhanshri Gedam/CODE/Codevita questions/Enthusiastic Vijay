import re

def parse_command(cmd):
    even_width, odd_width, hyphen = 75, 75, False
    tokens = cmd.split()
    for i, t in enumerate(tokens):
        if t == '-w':
            even_width = odd_width = int(tokens[i + 1])
        elif t == '-w-e':
            even_width = int(tokens[i + 1])
        elif t == '-w-o':
            odd_width = int(tokens[i + 1])
        elif t == 'h':
            hyphen = True
    return even_width, odd_width, hyphen


def is_email_or_url(word):
    return '@' in word or word.startswith('http://') or word.startswith('https://')


def split_word(word, limit):
    if len(word) <= limit:
        return [word]
    parts = []
    i = 0
    while i < len(word):
        end = min(i + limit - 1, len(word))
        if end < len(word):
            parts.append(word[i:end] + '-')
        else:
            parts.append(word[i:end])
        i = end
    return parts


def format_paragraph(words, even_width, odd_width, hyphen):
    result, line, line_len, line_idx = [], [], 0, 0
    i = 0
    while i < len(words):
        word = words[i]
        width = even_width if len(result) % 2 == 0 else odd_width
        space = 1 if line else 0

        if is_email_or_url(word):
            if line_len + len(word) + space <= width or not line:
                if line:
                    line.append(word)
                    line_len += len(word) + space
                else:
                    line = [word]
                    line_len = len(word)
                i += 1
            else:
                result.append(' '.join(line))
                line, line_len = [], 0
            continue

        if line_len + len(word) + space <= width:
            line.append(word)
            line_len += len(word) + space
            i += 1
        else:
            if hyphen and len(word) > width - line_len - space:
                parts = split_word(word, width - line_len - space)
                line.append(parts[0])
                result.append(' '.join(line))
                line, line_len = [], 0
                words[i] = parts[1].rstrip('-')
            else:
                result.append(' '.join(line))
                line, line_len = [], 0

    if line:
        result.append(' '.join(line))
    return result


def process_bullets(text):
    processed = []
    bullet_pattern = re.compile(r'(^[\*\-\"]|\d+[\.\)])')
    for line in text:
        parts = line.split()
        new_line = []
        for word in parts:
            if bullet_pattern.match(word):
                processed.append(word + ' ')
            else:
                new_line.append(word)
        if new_line:
            processed.append(' '.join(new_line))
    return processed


def main():
    n = int(input())
    lines = [input().rstrip() for _ in range(n)]
    cmd = input().strip()

    even_width, odd_width, hyphen = parse_command(cmd)

    paragraphs, temp = [], []
    for line in lines:
        if not line.strip():
            if temp:
                paragraphs.append(' '.join(temp))
                temp = []
        else:
            temp.append(line.strip())
    if temp:
        paragraphs.append(' '.join(temp))

    output = []
    for para in paragraphs:
        para = re.sub(r'\s+', ' ', para)
        words = para.split()
        words = process_bullets(words)
        formatted = format_paragraph(words, even_width, odd_width, hyphen)
        output.extend(formatted)
        output.append('')

    if output and output[-1] == '':
        output.pop()

    for line in output:
        print(line)


if __name__ == "__main__":
    main()
